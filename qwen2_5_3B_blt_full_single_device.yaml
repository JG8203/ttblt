# Config for single device full finetuning in full_finetune_single_device.py
# using a Qwen2.5 3B
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download Qwen/Qwen2.5-3B-Instruct --output-dir /tmp/Qwen2_5-3B-Instruct
#
# The default config uses an optimizer from bitsandbytes. If you do not have it installed,
# you can install it with
#   pip install bitsandbytes
#
# To launch on a single device, run the following command from root:
#   tune run full_finetune_single_device --config qwen2_5/3B_full_single_device
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run full_finetune_single_device --config qwen2_5/3B_full_single_device checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works only for training on single device.

output_dir: /tmp/torchtune/qwen2_5_3B_blt/full_single_device # /tmp may be deleted by your system. Change it to your preference.
#output_dir: /tmp/torchtune/qwen2_5_3B_blt_test/full_single_device # /tmp may be deleted by your system. Change it to your preference.

# Tokenizer
tokenizer:
  _component_: ttblt.bltqwen.blt_tokenizer
  #merges_file: /tmp/Qwen2_5-3B-Instruct/merges.txt
  # Reduced max length. This is quite short as we are dealing in bytes, but will do
  # for testing. 
  max_seq_len: 4096

# Dataset
dataset:
  _component_: torchtune.datasets.alpaca_cleaned_dataset
  packed: False  # True increases speed
seed: null
shuffle: True

# Model Arguments
model:
  _component_: ttblt.bltqwen.qwen2_5_blt
  freeze_global_for_n_steps: 500 # Warm up encoders first. 
  use_hash_ngrams: 0
  patch_size: 4

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: /tmp/Qwen2_5-3B-Instruct
  checkpoint_files: [
    model-00001-of-00002.safetensors,
    model-00002-of-00002.safetensors,
  ]
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: QWEN2
resume_from_checkpoint: False

# Fine-tuning arguments
batch_size: 1 # Reducing for memory usage.
epochs: 1
optimizer:
  _component_: bitsandbytes.optim.PagedAdamW
  lr: 1e-5 # Higher learning rate for new parameters. 
  # base_model_lr: 5e-6
optimizer_in_bwd: True  # True saves memory. Requires gradient_accumulation_steps=1
loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss
max_steps_per_epoch: null
gradient_accumulation_steps: 1  # Use to increase effective batch size
clip_grad_norm: null
compile: False  # torch.compile the model + loss, True increases speed + decreases memory

# Training environment
device: cuda:1
#device: cuda:1

# Memory management
enable_activation_checkpointing: True  # True reduces memory
enable_activation_offloading: False  # True reduces memory

# Reduced precision
dtype: bf16

# Logging
# metric_logger:
#   _component_: torchtune.training.metric_logging.DiskLogger
#   log_dir: ${output_dir}/logs
# log_every_n_steps: 1
# log_peak_memory_stats: False

metric_logger:
  _component_: torchtune.training.metric_logging.WandBLogger
  # the W&B project to log to
  project: ttqwblt
  log_dir: ${output_dir}/logs


# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False

  #Output directory of trace artifacts
  output_dir: ${output_dir}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 5
  warmup_steps: 3
  active_steps: 2
  num_cycles: 1
